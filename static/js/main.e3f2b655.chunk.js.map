{"version":3,"sources":["Images/powered-by-foursquare-grey.png","Components/MapContainer.js","Components/Sidebar.js","Components/ErrorBoundary.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","__webpack_require__","p","mapStyles","width","height","MapContainer","_Component","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","apply","arguments","inherits","createClass","key","value","props","marker","setAnimation","google","maps","Animation","BOUNCE","markers","_this","map","element","react_default","a","createElement","dist","id","onClick","onMarkerClick","onMouseover","onMouseout","onMouseOut","title","name","address","location","formattedAddress","address2","position","lat","lng","animation","DROP","error","console","log","zoom","style","initialCenter","createMarker","venues","createInfoWindows","Component","GoogleApiWrapper","onerror","alert","apiKey","SideBar","call","state","sidebaritems","items","_this2","item","className","handleClick","labeledLatLngs","href","document","getElementById","classList","toggle","contains","remove","add","setState","_this3","toggleMenu","onChange","event","filter","target","type","placeholder","aria-label","populateUl","showAll","ErrorBoundary","hasError","info","children","App","selectedPlace","activeMarker","showingInfoWindow","filteredVenues","includes","visible","src","Foursquare","alt","role","Sidebar","Components_ErrorBoundary","Components_MapContainer","getAll","fetch","then","response","json","resp","catch","isLocalhost","Boolean","window","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","ReactDOM","render","src_App_0","URL","process","origin","addEventListener","concat","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.e3f2b655.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/powered-by-foursquare-grey.cdd335d8.png\";","import React, { Component } from 'react';\nimport { Map, GoogleApiWrapper, Marker } from 'google-maps-react';\n\nconst mapStyles = {\n  width: '100%',\n  height: '100%'\n};\n\nexport class MapContainer extends Component {\n\n  /*\n    /Method used to set an animation when mouse is over.\n    */\n\n  onMouseover(props, marker) {\n    marker.setAnimation(props.google.maps.Animation.BOUNCE);\n  }\n\n  /*\n  /Method used to unset an animation when mouse is out.\n  */\n\n  onMouseOut(props,marker){\n  marker.setAnimation(null);\n  }\n\n  /*\n  /Create all the markers in the map\n  */\n\n  createMarker(markers){\n    try{\n      return markers.map((element) =>{\n        return <Marker\n                id = {element.id}\n                onClick={this.props.onMarkerClick}\n                onMouseover={this.onMouseover}\n                onMouseout={this.onMouseOut}\n                key = {element.id}\n                title={element.name}\n                name={element.name}\n                address={element.location.formattedAddress[0]}\n                address2 = {element.location.formattedAddress[1]}\n                position={{lat: element.location.lat, lng: element.location.lng}}\n                animation= {this.props.google.maps.Animation.DROP}>\n        </Marker>\n      })\n    }\n    \n    catch(error){\n      console.log(\"ERROR:\",error);\n    }\n  }\n  \n  /*\n    /Render the map\n    */\n\n  render() {\n    return (\n      <Map\n        google={this.props.google}\n        zoom={13}\n        style={mapStyles}\n        initialCenter={{\n        lat: 40.752557,\n        lng: -73.973435\n        }}>\n        {this.createMarker(this.props.venues)}\n        {this.props.createInfoWindows}\n      </Map>\n    );\n  }\n  \n}\n\nGoogleApiWrapper.onerror = function() {\n  alert(\"Error loading Google Maps API\");\n};\n\nexport default GoogleApiWrapper({\n  apiKey: 'AIzaSyDEoKFWvzVvLPwQmlJG-LjlB8mX7DR9SEA',\n})(MapContainer);","import React, { Component } from 'react';\nimport '../App.css';\n\nclass SideBar extends Component {\n\n  constructor(props){\n    super(props);\n    this.state = {sidebaritems: {}};\n  }\n\n  /*\n  /Put on the list the elements using\n  /the information of foursquare API.\n  */\n\n  populateUl(items){\n    try{\n      return items.map((item) =>{\n        return (<li key={item.id} className=\"nav-item\">\n        <button\n        onClick = {() => this.props.handleClick({\n          position:{\n            lat: item.location.labeledLatLngs[0].lat, \n            lng:item.location.labeledLatLngs[0].lng\n          },\n            address: item.location.formattedAddress[0],\n            address2: item.location.formattedAddress[1],\n            name: item.name\n        })}\n        className=\"nav-link\" \n        href=\"#\">{item.name}</button>\n      </li>)\n      })\n    }\n    catch(error){\n      console.log(\"ERROR:\", error);\n    }\n  }\n\n  /*\n  /Toggle the classes of hamburguer menu.\n  */\n\n  toggleMenu(){\n    document.getElementById('sidebar-list').classList.toggle('hidden');\n    if(document.getElementById('hamburguer-icon').classList.contains('fa-bars')){\n      document.getElementById('hamburguer-icon').classList.remove('fa-bars');\n      document.getElementById('hamburguer-icon').classList.add('fa-times');\n    }\n    else{\n      document.getElementById('hamburguer-icon').classList.remove('fa-times');\n    document.getElementById('hamburguer-icon').classList.add('fa-bars');\n    }\n  }\n\n  componentWillReceiveProps(props){\n    this.setState({sidebaritems: props.sidebaritems})\n  }\n\n  render() {\n    return (\n      <aside id= \"sidebar-list\" className= \"hidden\">\n        <button onClick={this.toggleMenu} id= \"hamburguer\"><i id=\"hamburguer-icon\" className=\"fas fa-bars\"></i></button>\n        <ul className=\"nav flex-column\">\n        <input id=\"filter\" onChange={(event) => this.props.filter(event.target.value)} type=\"text\" placeholder=\"Filter results...\" aria-label=\"Filter results\"></input> \n        {this.populateUl(this.state.sidebaritems)}\n        <li className=\"nav-item\"><button onClick={this.props.showAll} className=\"nav-link\" href=\"#\"><i className=\"fas fa-arrows-alt\"></i>Show All</button>\n      </li>\n        </ul>\n      </aside>\n    );\n  }\n}\n\nexport default SideBar;\n","import React, { Component } from 'react';\n\nclass ErrorBoundary extends Component {\n  constructor(props) {\n    super(props);\n    this.state = { hasError: false };\n  }\n\n  static getDerivedStateFromError(error) {\n    return { hasError: true };\n  }\n\n  componentDidCatch(error, info) {\n    console.log(error, info);\n  }\n\n  render() {\n    if (this.state.hasError) {\n      return <h1 id=\"error-h1\">Sorry, something went wrong with our Map :'(</h1>;\n    }\n\n    return this.props.children; \n  }\n}\n\nexport default ErrorBoundary;","import React, { Component } from 'react';\nimport MapContainer from './Components/MapContainer';\nimport { InfoWindow } from 'google-maps-react';\nimport Foursquare from './Images/powered-by-foursquare-grey.png';\nimport Sidebar from './Components/Sidebar';\nimport ErrorBoundary from './Components/ErrorBoundary';\nimport './App.css';\n\nclass App extends Component {\n  /*\n  /State: showingInfoWindow is used to show or hide an infoWindow,\n  /activeMarker is used to save the actual marker/position,\n  /selectedPlace is used to save props of a clicked marker.\n  */\n\n  constructor(props){\n    super(props);\n    this.state = {\n      showingInfoWindow: false,\n      activeMarker: {},\n      selectedPlace: {},\n      venues: null,\n      filteredVenues: null\n    };\n  }\n\n  /*\n  /This method is used to change the state\n  /when a marker is clicked on the map\n  /or when the user clicks on a list item.\n  */\n\n  onMarkerClick= (props, marker)=>{\n      this.setState({\n        selectedPlace: props,\n        activeMarker: marker,\n        showingInfoWindow: true\n    });\n  }\n  /*\n  /Used to handle the click from user and is passed to Sidebar component.\n  */\n  handleClick = (item) => {\n    this.onMarkerClick(item, item);\n    this.filter(item.name);\n  }\n\n  /*\n  /Creates the infoWindow that's passed to the MapContainer component.\n  */\n  createInfoWindows(){\n    return <InfoWindow\n            position={this.state.activeMarker.position}\n            visible={this.state.showingInfoWindow}>\n              <div>\n                <h5>{this.state.selectedPlace.name}</h5>\n                <p>Address: {this.state.selectedPlace.address}<br></br>{this.state.selectedPlace.address2}</p><br></br>\n                <a href= \"https://developer.foursquare.com/\" target=\"blank\"><img id=\"foursquareImg\" src= {Foursquare} alt= \"Foursquare Icon\"></img></a>\n              </div>\n          </InfoWindow>\n  }\n\n  /*\n  /Render the component\n  */\n\n  render() {\n    return (\n      <div className = \"container-flex\">\n      <div role=\"application\" className= \"row\">\n      <Sidebar sidebaritems = {this.state.filteredVenues ? this.state.filteredVenues :this.state.venues}\n      handleClick = {this.handleClick}\n      filter = {this.filter}\n      showAll = {this.showAll}></Sidebar>\n      <ErrorBoundary>\n      <MapContainer \n      venues = {this.state.filteredVenues ? this.state.filteredVenues :this.state.venues}\n      onMarkerClick = {this.onMarkerClick}\n      createInfoWindows = {this.createInfoWindows()}></MapContainer>\n      </ErrorBoundary>\n        </div>\n      </div>\n    );\n  }\n\n  componentDidMount(){\n    this.getAll();\n  }\n\n  /*\n  /Filter the li's in the list based on the input of user.\n  */\n\n  filter = (value) =>{\n    this.setState({filteredVenues:this.state.venues.filter((element) =>{\n      if(element.name.includes(value)){\n        return element;\n      }\n      return null;\n    })});\n  }\n\n  showAll=()=>{\n    this.setState({filteredVenues: this.state.venues});\n    this.setState({showingInfoWindow: false});\n  }\n\n  /*\n  /Get all the information of Foursquare API\n  */\n\n  getAll(){\n    fetch('https://api.foursquare.com/v2/venues/search?ll=40.752557,-73.973435&query=food&limit=10&intent=browse&radius=10000&client_id=UCF54S5TJFOVXMJ1J4AGS0MTAW0CBRCCPAXGX2CTOINGGXTU&client_secret=VIEJP3NBRQ3U2KAXEMDYHQ1XTLAJJS2AROH3YXYCJYEHACVV&v=20190208')\n    .then((response) => {\n        // Code for handling API response\n      response.json().then((resp) => {\n        this.setState({venues: resp.response.venues});\n      });\n    })\n    .catch((error)=> {\n        alert(\"Sorry, it wasn't possible to load all the information, try to check out your internet connection.\");\n        console.log(\"ERROR: \", error);\n    });\n  }\n}\n\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n \n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}